{"version":3,"sources":["hooks/useSnakeGame.js","utils/index.js","constants/index.js","components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","App.js","reportWebVitals.js","index.js"],"names":["timer","getFoodPosition","fieldSize","exclude","x","Math","floor","random","y","some","item","initFields","snake","food","fields","i","cols","Array","fill","push","defaultFieldSize","initialBody","initialFood","initialFields","Difficulty","initialState","body","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","OppositeDirection","Delta","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","map","row","col","index","Button","status","onStart","onRestart","onStop","ManipulationPanel","onChange","unsubscribe","clearInterval","useSnakeGame","useState","state","setState","setStatus","direction","setDirection","setDifficulty","updateDirection","useCallback","newDirection","updateDifficulty","useEffect","handleKeyDown","e","key","document","addEventListener","removeEventListener","setInterval","position","newPosition","isEatingMyself","newBody","newFields","newFoodPos","remove","pop","prev","start","stop","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6ca9e8ea.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nimport {\n  defaultFieldSize,\n  defaultDifficulty,\n  Delta,\n  Difficulty,\n  Direction,\n  DirectionKeyCodeMap,\n  GameStatus,\n  OppositeDirection,\n  initialBody,\n  initialFood,\n  initialState,\n} from \"../constants\";\n\nimport { initFields, isCollision, isEatingMyself, getFoodPosition } from \"../utils\";\n\n// import reducer from \"../reducers/reducer\";\n\n// タイマー\nlet timer;\nconst unsubscribe = () => {\n  if (!timer) {\n    return;\n  }\n  clearInterval(timer);\n};\n\nconst useSnakeGame = () => {\n  const [state, setState] = useState(initialState);\n  const [status, setStatus] = useState(GameStatus.init);\n  const [direction, setDirection] = useState(Direction.up);\n  const [difficulty, setDifficulty] = useState(defaultDifficulty);\n\n  const start = () => setStatus(GameStatus.playing);\n  const stop = () => setStatus(GameStatus.suspended);\n  const reload = () => {\n    setStatus(GameStatus.init);\n    setDirection(Direction.up);\n    setState({\n      body: [initialBody],\n      food: initialFood,\n      fields: initFields(defaultFieldSize, initialBody, initialFood),\n    });\n  };\n\n  const updateDirection = useCallback(\n    (newDirection) => {\n      if (status !== GameStatus.playing) {\n        return direction;\n      }\n      if (OppositeDirection[direction] === newDirection) {\n        return;\n      }\n      setDirection(newDirection);\n    },\n    [direction, status]\n  );\n\n  const updateDifficulty = useCallback(\n    (difficulty) => {\n      if (status !== GameStatus.init) {\n        return;\n      }\n      if (difficulty < 1 || difficulty > Difficulty.length) {\n        return;\n      }\n      setDifficulty(difficulty);\n    },\n    [status]\n  );\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const newDirection = DirectionKeyCodeMap[e.key];\n      if (!newDirection) {\n        return;\n      }\n      updateDirection(newDirection);\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [updateDirection]);\n\n  // メイン処理\n  useEffect(() => {\n    if (status !== GameStatus.playing) {\n      return;\n    }\n\n    const interval = Difficulty[difficulty - 1];\n\n    timer = setInterval(() => {\n      const newPosition = {\n        x: state.body[0].x + Delta[direction].x,\n        y: state.body[0].y + Delta[direction].y,\n      };\n\n      if (isCollision(newPosition) || isEatingMyself(state.fields, newPosition)) {\n        setStatus(GameStatus.gameover);\n      }\n\n      const newBody = [newPosition, ...state.body];\n      const newFields = [...state.fields];\n      if (state.fields[newPosition.y][newPosition.x] === \"food\") {\n        const newFoodPos = getFoodPosition(defaultFieldSize, [...state.body, newPosition]);\n        newFields[newPosition.y][newPosition.x] = \"snake\";\n        newFields[newFoodPos.y][newFoodPos.x] = \"food\";\n        setState({\n          body: newBody,\n          food: newFoodPos,\n          fields: newFields,\n        });\n      } else {\n        const remove = newBody.pop();\n        newFields[remove.y][remove.x] = \"\";\n        newFields[newPosition.y][newPosition.x] = \"snake\";\n        setState((prev) => {\n          return {\n            ...prev,\n            body: newBody,\n            fields: newFields,\n          };\n        });\n      }\n    }, interval);\n    return unsubscribe;\n  }, [state, status, direction, difficulty]);\n\n  return {\n    state,\n    difficulty,\n    status,\n    start,\n    stop,\n    reload,\n    updateDirection,\n    updateDifficulty,\n  };\n};\n\nexport default useSnakeGame;\n","import { defaultFieldSize } from \"../constants\";\nexport const getFoodPosition = (fieldSize, exclude) => {\n  while (true) {\n    const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const conflict = exclude.some((item) => item.x === x && item.y === y);\n\n    if (!conflict) {\n      return { y, x };\n    }\n  }\n};\n\nexport const initFields = (fieldSize, snake, food) => {\n  const fields = [];\n  for (let i = 0; i < fieldSize; i++) {\n    const cols = new Array(fieldSize).fill(\"\");\n    fields.push(cols);\n  }\n  fields[snake.y][snake.x] = \"snake\";\n  fields[food.y][food.x] = \"food\";\n  return fields;\n};\n\nexport const isCollision = (position) => {\n  if (position.y <= 0 || position.x <= 0) {\n    return true;\n  }\n  if (position.y >= defaultFieldSize - 1 || position.x >= defaultFieldSize - 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === \"snake\";\n};\n","import { initFields, getFoodPosition } from \"../utils\";\n\nexport const defaultFieldSize = 35;\nexport const initialBody = { x: 17, y: 17 };\nexport const initialFood = getFoodPosition(defaultFieldSize, [initialBody]);\nexport const initialFields = initFields(defaultFieldSize, initialBody, initialFood);\nexport const defaultInterval = 100;\nexport const defaultDifficulty = 3;\nexport const Difficulty = [100, 80, 50, 30, 10];\nexport const initialState = {\n  body: [initialBody],\n  food: initialFood,\n  fields: initialFields,\n};\n\nexport const GameStatus = Object.freeze({\n  init: \"init\",\n  playing: \"playing\",\n  suspended: \"suspended\",\n  gameover: \"gameover\",\n});\n\nexport const Direction = Object.freeze({\n  up: \"up\",\n  right: \"right\",\n  left: \"left\",\n  down: \"down\",\n});\n\nexport const DirectionKeyCodeMap = Object.freeze({\n  ArrowLeft: Direction.left,\n  ArrowUp: Direction.up,\n  ArrowRight: Direction.right,\n  ArrowDown: Direction.down,\n});\n\nexport const OppositeDirection = Object.freeze({\n  up: \"down\",\n  right: \"left\",\n  left: \"right\",\n  down: \"up\",\n});\n\nexport const Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n});\n","import React from \"react\";\nimport { defaultDifficulty, Difficulty } from \"../constants\";\n\nconst Navigation = ({ length, difficulty = defaultDifficulty, onChangeDifficulty }) => {\n  const upVisibility = difficulty < Difficulty.length ? \"\" : \"is-hidden\";\n  const downVisibility = difficulty > 1 ? \"\" : \"is-hidden\";\n  const onUpDifficulty = () => onChangeDifficulty(difficulty + 1);\n  const onDownDifficulty = () => onChangeDifficulty(difficulty - 1);\n  return (\n    <div className=\"navigation\">\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Length: </span>\n        <div className=\"navigation-item-number-container\">\n          <div className=\"num-board\">{length}</div>\n        </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficulty: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficulty-button-container\">\n            <div className={`difficulty-button difficulty-up ${upVisibility}`} onClick={onUpDifficulty}></div>\n            <div className={`difficulty-button difficulty-down ${downVisibility}`} onClick={onDownDifficulty}></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nconst Field = ({fields}) => {\n  return (\n    <div className=\"field\">\n      {\n        fields.map((row) => {\n          return row.map((col, index) => {\n            return <div className={`dots ${col}`} key={index}></div>\n          })\n        })\n      }\n    </div>\n  );\n};\n\nexport default Field;","import React from \"react\";\nimport { GameStatus } from \"../constants\";\n\nconst Button = ({ status, onStart, onRestart, onStop }) => {\n  return (\n    <div className=\"button\">\n      {status === GameStatus.gameover && (\n        <button className=\"btn btn-gameover\" onClick={onRestart}>\n          gameover\n        </button>\n      )}\n      {status === GameStatus.init && (\n        <button className=\"btn btn-init\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === GameStatus.suspended && (\n        <button className=\"btn btn-suspended\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === GameStatus.playing && (\n        <button className=\"btn btn-playing\" onClick={onStop}>\n          stop\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Direction } from \"../constants\";\n\nconst ManipulationPanel = ({ onChange }) => {\n  const onUp = () => onChange(Direction.up);\n  const onRight = () => onChange(Direction.right);\n  const onLeft = () => onChange(Direction.left);\n  const onDown = () => onChange(Direction.down);\n\n  return (\n    <div className=\"manipulation-panel\">\n      <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n        ←\n      </button>\n      <div>\n        <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n          ↑\n        </button>\n        <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n          ↓\n        </button>\n      </div>\n      <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n        →\n      </button>\n    </div>\n  );\n};\n\nexport default ManipulationPanel;\n","import React from \"react\";\nimport Navigation from \"./components/Navigation\";\nimport Field from \"./components/Field\";\nimport Button from \"./components/Button\";\nimport ManipulationPanel from \"./components/ManipulationPanel\";\nimport useSnakeGame from \"./hooks/useSnakeGame\";\n\nfunction App() {\n  const { state, difficulty, start, stop, reload, status, updateDirection, updateDifficulty } = useSnakeGame();\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation key=\"navigation\" length={state.body.length} difficulty={difficulty} onChangeDifficulty={updateDifficulty} />\n      </header>\n      <main className=\"main\">\n        <Field fields={state.fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button status={status} onStart={start} onRestart={reload} onStop={stop} />\n        <ManipulationPanel onChange={updateDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}